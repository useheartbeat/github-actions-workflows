on:
  workflow_call:
    inputs:
      service:
        required: true
        type: string
      env:
        required: false
        type: string
    outputs:
      image-tag:
        description: Short sha used for Docker image versioning
        value: ${{ jobs.build.outputs.image-tag }}
      branch: 
        description: Current branch name
        value: ${{ jobs.build.outputs.branch }}
      branch-current: 
        description: Boolean indicating if branch is up to date with main
        value: ${{ jobs.build.outputs.current }}

jobs:
  build:
    runs-on: ubuntu-20.04

    outputs:
      image-tag: ${{ steps.sha.outputs.sha_short }}
      branch: ${{ steps.branch.outputs.branch }}
      branch-current: ${{ steps.checkCurrent.outputs.current }}

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Slack status
        if: always()
        uses: act10ns/slack@v2.0.0
        with:
          status: starting
          channel: '#github-actions'
          message: Starting Docker Build and Push...
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Checkout
        id: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::631720813209:role/GitHubRole
          aws-region: us-east-1
          role-session-name: actions-${{ inputs.env }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set short SHA
        id: sha
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Get branch name
        id: branch
        run: echo "branch=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT

      - name: Build, tag, and push image to Amazon ECR (non-Vite)
        id: build
        if: inputs.env == ''
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: hb-${{ inputs.service }}
          IMAGE_TAG: ${{ steps.sha.outputs.sha_short }}
        run: |
          echo "building and pushing to: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --build-arg githubUsername=hbh-github --build-arg githubToken=${{ secrets.GH_TOKEN }} .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Generate env file for vite services
        id: env-file
        if: inputs.env != ''
        env:
          ENV: ${{ inputs.env }}
          AWS_DEFAULT_REGION: us-east-1
          SSM_PATH: /${{ inputs.env }}/us-east-1/hb-${{ inputs.service }}
          SERVICE: ${{ inputs.service }}
        run: |
          wget https://github.com/Droplr/aws-env/raw/master/bin/aws-env-linux-amd64 -O aws-env
          chmod u+x aws-env
          touch env_vars.env
          set +x # avoid logging secrets
          AWS_ENV_PATH=${SSM_PATH} AWS_REGION=${AWS_DEFAULT_REGION} ./aws-env --format=dotenv > env_vars.env
          AWS_ENV_PATH=/${ENV}/${AWS_DEFAULT_REGION}/global AWS_REGION=${AWS_DEFAULT_REGION} ./aws-env --format=dotenv >> env_vars.env
          AWS_ENV_PATH=/${ENV}/${AWS_DEFAULT_REGION}/terraform/hb-${SERVICE} AWS_REGION=${AWS_DEFAULT_REGION} ./aws-env --format=dotenv >> env_vars.env
          set -x # continue verbose logging
          echo "Env vars set"

      - name: Setup upterm session
        if: inputs.env != ''
        uses: lhotari/action-upterm@v1

      - name: Build, tag, and push image to Amazon ECR (Vite services)
        id: build-vite
        if: inputs.env != ''
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: hb-${{ inputs.service }}
          IMAGE_TAG: ${{ steps.sha.outputs.sha_short }}
          ENV: ${{ inputs.env }}
          REGION: us-east-1
        run: |
          echo "building and pushing to: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker buildx build --build-arg env=$ENV -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --push .

      - name: Check if branch is up to date
        id: checkCurrent
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          set -x
          DEFAULT_BRANCH=${{ github.event.repository.default_branch }}
          git fetch
          git checkout $DEFAULT_BRANCH
          git checkout -
          if ! git merge-base --is-ancestor $DEFAULT_BRANCH HEAD; then
            echo "current=false" >> $GITHUB_OUTPUT
          else
             echo "current=true" >> $GITHUB_OUTPUT
          fi

      - name: Post final status
        if: always()
        uses: act10ns/slack@v2.0.0
        with:
          status: ${{ job.status }}
          channel: '#github-actions'
          message: Build ${{ job.status }}, logs at ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
